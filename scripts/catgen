#!/usr/bin/env python3
"""Create a STAC Catalog from file glob patterns.
"""
import argparse
import json
import logging
import os
from datetime import datetime
from pathlib import Path

import fnmeta
import pystac
from pystac import Asset, Catalog, CatalogType, Item, Link, RelType

LOG = logging.getLogger("caten")


def get_times(fpath: Path) -> "tuple[datetime, datetime] | None":
    meta = fnmeta.identify(fpath.name) or {}
    if fpath.suffix.lower() == ".pds" and "created" in meta:
        # TODO: check meta["rec_type"] to determine what end time should be
        return meta["created"], meta["created"]
    if "begin_time" in meta and "end_time" in meta:
        return meta["begin_time"], meta["end_time"]
    if "begin_time" in meta:
        return meta["begin_time"], meta["begin_time"]
    return None


def generate_catalog(
    collection_id: str,
    pattern: str,
    basedir: Path,
) -> Catalog:
    dirpath, pattern = os.path.split(pattern)
    catalog = Catalog(collection_id, description="STAC Catalog")
    catalog.add_link(Link(RelType.SELF, str(basedir / "catalog.json")))

    for fpath in Path(dirpath).glob(pattern):
        LOG.debug("adding datafile %s", fpath)
        times = get_times(fpath)
        if not times:
            LOG.warning("failed to determine file times for %s; skipping", fpath.name)
            continue
        start, end = times
        try:
            item = Item(
                id=fpath.name.rsplit(".", 1)[0],
                geometry=None,
                bbox=None,
                properties={},
                datetime=start,
                start_datetime=start,
                end_datetime=end,
                assets={
                    "data": Asset(href=str(fpath), roles=["data"]),
                },
                # set collection kws only if one was specified as part of pattern
                **({"collection": collection_id} if collection_id else {}),  # type: ignore
            )
            meta_path = fpath.with_suffix(".json")
            LOG.debug("adding metadata %s", meta_path)
            item.add_asset("metadata", Asset(href=str(meta_path), roles=["metadata"]))
            # Slack_2024-09-18: change asset keys from data/metadata to filename
            for k in ["data", "metadata"]:
                fn = os.path.basename(item.assets[k].href)
                item.assets[fn] = item.assets.pop(k)
            json.dump(item.to_dict(), open(meta_path, "w"))

            catalog.add_link(Link(RelType.ITEM, str(meta_path), "application/json"))
        except pystac.STACError:
            LOG.exception("failed to create or add item for %s", fpath.name)
            continue

    if len(list(catalog.get_all_items())) == 0:
        raise ValueError("(catgen) Failed to catalog any files")

    # catalog.normalize_hrefs(str(basedir.absolute()))
    # catalog.make_all_asset_hrefs_relative()
    catalog.save(catalog_type=CatalogType.SELF_CONTAINED)

    return catalog


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")
    parser.add_argument("collection_id")
    parser.add_argument(
        "file_pattern", help="Glob style file pattern to include in catalog"
    )
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO, format="%(name)s -- %(message)s")
    LOG.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    catalog = generate_catalog(
        args.collection_id,
        args.file_pattern,
        basedir=Path("."),
    )
    if args.verbose:
        catalog.describe(include_hrefs=True)
